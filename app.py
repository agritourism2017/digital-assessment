# -*- coding: utf-8 -*-
"""
DIGITAL MATURITY ASSESSMENT - WEB APP
"""

import streamlit as st
import os
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Import Anthropic AFTER checking API key
api_key = None

# Priority 1: Try Streamlit secrets (for Streamlit Cloud)
try:
    api_key = st.secrets["ANTHROPIC_API_KEY"]
except:
    pass

# Priority 2: Try environment variable (for local)
if not api_key:
    api_key = os.getenv("ANTHROPIC_API_KEY")

# Check if API key exists
if not api_key or api_key == "your_api_key_here":
    st.error("""
    ‚ö†Ô∏è **API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!**
    
    **H∆∞·ªõng d·∫´n:**
    1. V√†o Settings (g√≥c d∆∞·ªõi ph·∫£i)
    2. Ch·ªçn tab "Secrets"
    3. Th√™m d√≤ng: `ANTHROPIC_API_KEY = "your-key-here"`
    4. Click Save
    
    **L·∫•y API key:** https://console.anthropic.com/settings/keys
    """)
    st.stop()

# Now import and initialize Anthropic
try:
    from anthropic import Anthropic
    client = Anthropic(api_key=api_key)
    
    # Test connection
    st.sidebar.success("‚úÖ API connected")
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi API: {str(e)}")
    st.stop()
# Check if API key exists
if not api_key or api_key == "your_api_key_here":
    st.error("""
    ‚ö†Ô∏è **API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!**
    
    **H∆∞·ªõng d·∫´n:**
    1. V√†o Settings (g√≥c d∆∞·ªõi ph·∫£i)
    2. Ch·ªçn tab "Secrets"
    3. Th√™m d√≤ng: `ANTHROPIC_API_KEY = "your-key-here"`
    4. Click Save
    
    **L·∫•y API key:** https://console.anthropic.com/settings/keys
    """)
    st.stop()

# Now import and initialize Anthropic
try:
    from anthropic import Anthropic
    client = Anthropic(api_key=api_key)
    
    # Test connection
    st.sidebar.success("‚úÖ API connected")
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi API: {str(e)}")
    st.stop()

# Cau hinh trang
st.set_page_config(
    page_title="Digital Maturity Assessment",
    page_icon="üìä",
    layout="wide"
)

# CSS tuy chinh
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        background-color: #667eea;
        color: white;
        font-size: 18px;
        padding: 0.5rem 2rem;
        border-radius: 8px;
        border: none;
    }
    .stButton>button:hover {
        background-color: #5568d3;
    }
    h1 {
        color: #667eea;
    }
    .score-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
    }
    </style>
""", unsafe_allow_html=True)

# Header
st.markdown("<h1>üìä ƒê√°nh Gi√° M·ª©c ƒê·ªô Chuy·ªÉn ƒê·ªïi S·ªë</h1>", unsafe_allow_html=True)
st.markdown("---")

# Gioi thieu
with st.expander("‚ÑπÔ∏è V·ªÅ c√¥ng c·ª• n√†y"):
    st.write("""
    **C√¥ng c·ª• AI-Powered Assessment** gi√∫p b·∫°n:
    - ƒê√°nh gi√° m·ª©c ƒë·ªô s·ªë h√≥a c·ªßa doanh nghi·ªáp
    - So s√°nh v·ªõi 50+ c√¥ng ty c√πng ng√†nh t·∫°i VN
    - Nh·∫≠n b√°o c√°o chi ti·∫øt ngay l·∫≠p t·ª©c
    - ƒê·ªÅ xu·∫•t roadmap 12 th√°ng c·ª• th·ªÉ
    
    **Th·ªùi gian:** 5 ph√∫t | **Chi ph√≠:** Mi·ªÖn ph√≠
    """)

st.markdown("---")

# FORM ƒê√ÅNH GI√Å
st.markdown("## üìã Th√¥ng Tin Doanh Nghi·ªáp")

col1, col2 = st.columns(2)

with col1:
    company_name = st.text_input(
        "T√™n c√¥ng ty *",
        placeholder="VD: ABC Company"
    )
    
    industry = st.selectbox(
        "Ng√†nh ngh·ªÅ *",
        ["Ch·ªçn ng√†nh...", "Retail (B√°n l·∫ª)", "Manufacturing (S·∫£n xu·∫•t)", 
         "Services (D·ªãch v·ª•)", "Other (Kh√°c)"]
    )

with col2:
    employee_count = st.selectbox(
        "S·ªë l∆∞·ª£ng nh√¢n vi√™n",
        ["Ch·ªçn...", "1-10", "11-50", "51-200", "201-500", "500+"]
    )
    
    revenue = st.selectbox(
        "Doanh thu h√†ng nƒÉm (t·ª∑ VNƒê)",
        ["Ch·ªçn...", "<5", "5-20", "20-100", "100-500", ">500"]
    )

st.markdown("---")
st.markdown("## üîç C√¢u H·ªèi ƒê√°nh Gi√°")

st.markdown("### 1. Qu·∫£n l√Ω d·ªØ li·ªáu kh√°ch h√†ng")
q1 = st.radio(
    "C√¥ng ty b·∫°n qu·∫£n l√Ω d·ªØ li·ªáu kh√°ch h√†ng nh∆∞ th·∫ø n√†o?",
    [
        "1 - Excel/gi·∫•y t·ªù, kh√¥ng c√≥ h·ªá th·ªëng",
        "2 - Excel c√≥ c·∫•u tr√∫c, chia s·∫ª qua email",
        "3 - Ph·∫ßn m·ªÅm ƒë∆°n gi·∫£n (Google Sheets, Airtable)",
        "4 - CRM c∆° b·∫£n (ch∆∞a t√≠ch h·ª£p)",
        "5 - CRM chuy√™n nghi·ªáp, t√≠ch h·ª£p ƒë·∫ßy ƒë·ªß"
    ],
    key="q1"
)

st.markdown("### 2. B√°o c√°o doanh s·ªë")
q2 = st.radio(
    "B·∫°n t·∫°o b√°o c√°o doanh s·ªë bao l√¢u m·ªôt l·∫ßn?",
    [
        "1 - Kh√¥ng c√≥ b√°o c√°o ƒë·ªãnh k·ª≥",
        "2 - H√†ng th√°ng, l√†m th·ªß c√¥ng",
        "3 - H√†ng tu·∫ßn, l√†m th·ªß c√¥ng",
        "4 - H√†ng ng√†y, t·ª± ƒë·ªông m·ªôt ph·∫ßn",
        "5 - Real-time dashboard, ho√†n to√†n t·ª± ƒë·ªông"
    ],
    key="q2"
)

st.markdown("### 3. ƒêo l∆∞·ªùng ROI Marketing")
q3 = st.radio(
    "B·∫°n c√≥ th·ªÉ ƒëo l∆∞·ªùng ROI c·ªßa c√°c chi·∫øn d·ªãch marketing kh√¥ng?",
    [
        "1 - Kh√¥ng, kh√¥ng c√≥ tracking",
        "2 - ∆Ø·ªõc l∆∞·ª£ng s∆° b·ªô",
        "3 - ƒêo ƒë∆∞·ª£c m·ªôt ph·∫ßn (VD: ch·ªâ online ads)",
        "4 - ƒêo ƒë∆∞·ª£c ƒëa s·ªë k√™nh, nh∆∞ng kh√¥ng real-time",
        "5 - ƒêo ch√≠nh x√°c m·ªçi k√™nh, real-time"
    ],
    key="q3"
)

st.markdown("### 4. Th√°ch th·ª©c ch√≠nh")
challenges = st.text_area(
    "3 th√°ch th·ª©c l·ªõn nh·∫•t v·ªÅ c√¥ng ngh·ªá/quy tr√¨nh hi·ªán t·∫°i?",
    placeholder="VD: D·ªØ li·ªáu b·ªã ph√¢n m·∫£nh, kh√¥ng c√≥ b√°o c√°o t·ª± ƒë·ªông...",
    height=100
)

st.markdown("---")
st.markdown("## üìû Th√¥ng Tin Li√™n H·ªá")

col3, col4 = st.columns(2)

with col3:
    contact_name = st.text_input("H·ªç t√™n *")

with col4:
    contact_email = st.text_input("Email *")

st.markdown("---")

# N√öT SUBMIT
if st.button("üöÄ T·∫°o B√°o C√°o Ngay", use_container_width=True):
    
    # Validation
    if not company_name or not contact_name or not contact_email:
        st.error("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (*)")
    elif industry == "Ch·ªçn ng√†nh...":
        st.error("‚ö†Ô∏è Vui l√≤ng ch·ªçn ng√†nh ngh·ªÅ")
    elif "@" not in contact_email:
        st.error("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá")
    else:
        # Tinh diem
        score_q1 = int(q1.split(" -")[0])
        score_q2 = int(q2.split(" -")[0])
        score_q3 = int(q3.split(" -")[0])
        
        score = round((score_q1 + score_q2 + score_q3) / 3, 1)
        
        # Hien thi diem
        st.markdown("---")
        st.markdown(f"""
        <div class="score-box">
            <h2>ƒêi·ªÉm S·ªë H√≥a C·ªßa B·∫°n</h2>
            <h1 style="font-size: 72px; margin: 20px 0;">{score}/5.0</h1>
            <p style="font-size: 18px;">ƒêang ph√¢n t√≠ch chi ti·∫øt b·∫±ng AI...</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # Goi AI
            status_text.text("ü§ñ ƒêang k·∫øt n·ªëi v·ªõi AI...")
            progress_bar.progress(20)
            
            # Map industry
            industry_map = {
                "Retail (B√°n l·∫ª)": "retail",
                "Manufacturing (S·∫£n xu·∫•t)": "manufacturing",
                "Services (D·ªãch v·ª•)": "services",
                "Other (Kh√°c)": "other"
            }
            industry_code = industry_map.get(industry, "other")
            
            # Benchmark
            benchmarks = {
                "retail": {"avg": 3.2, "top": 4.1},
                "manufacturing": {"avg": 2.8, "top": 3.9},
                "services": {"avg": 3.5, "top": 4.3},
                "other": {"avg": 3.0, "top": 4.0}
            }
            benchmark = benchmarks[industry_code]
            
            prompt = f"""B·∫°n l√† chuy√™n gia t∆∞ v·∫•n chuy·ªÉn ƒë·ªïi s·ªë t·∫°i Vi·ªát Nam.

TH√îNG TIN DOANH NGHI·ªÜP:
- T√™n: {company_name}
- Ng√†nh: {industry}
- Nh√¢n vi√™n: {employee_count}
- Doanh thu: {revenue} t·ª∑ VNƒê/nƒÉm
- ƒêi·ªÉm s·ªë h√≥a: {score}/5.0
- Trung b√¨nh ng√†nh: {benchmark['avg']}/5.0
- Top 25% ng√†nh: {benchmark['top']}/5.0

TH√ÅCH TH·ª®C CH√çNH:
{challenges if challenges else 'Ch∆∞a cung c·∫•p'}

H√£y vi·∫øt b√°o c√°o ph√¢n t√≠ch (300-400 t·ª´) bao g·ªìm:

1. **T√≥m t·∫Øt** (2-3 c√¢u ƒë√°nh gi√° t·ªïng quan)

2. **Top 3 Gaps** (ƒëi·ªÉm y·∫øu c·∫ßn kh·∫Øc ph·ª•c ngay):
   - Gap 1: [T√™n gap] - [T·∫°i sao quan tr·ªçng] - [Chi ph√≠/r·ªßi ro n·∫øu kh√¥ng fix]
   - Gap 2: ...
   - Gap 3: ...

3. **Quick Wins** (3 h√†nh ƒë·ªông trong 3 th√°ng):
   - Action 1: [C·ª• th·ªÉ, chi ph√≠ th·∫•p, impact cao]
   - Action 2: ...
   - Action 3: ...

4. **ƒê·ªÅ xu·∫•t c√¥ng ngh·ªá** (1-2 gi·∫£i ph√°p ph√π h·ª£p):
   - Tool/Platform: [T√™n] - [L√Ω do] - [Chi ph√≠ ∆∞·ªõc t√≠nh VN]

5. **Roadmap 12 th√°ng** (timeline ng·∫Øn g·ªçn):
   - Th√°ng 1-3: ...
   - Th√°ng 4-6: ...
   - Th√°ng 7-12: ...

Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, phong c√°ch chuy√™n nghi·ªáp, d·ªÖ hi·ªÉu, C·ª§ TH·ªÇ v·ªõi th·ªã tr∆∞·ªùng VN."""

            status_text.text("üß† AI ƒëang ph√¢n t√≠ch...")
            progress_bar.progress(40)
            
            response = client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=3000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            analysis = response.content[0].text
            
            progress_bar.progress(80)
            status_text.text("üìù ƒêang t·∫°o b√°o c√°o...")
            
            # Luu ket qua vao session state
            st.session_state.report_generated = True
            st.session_state.company_name = company_name
            st.session_state.score = score
            st.session_state.benchmark = benchmark
            st.session_state.analysis = analysis
            st.session_state.contact_email = contact_email
            
            progress_bar.progress(100)
            status_text.text("‚úÖ Ho√†n th√†nh!")
            
            # Hien thi ket qua
            st.markdown("---")
            st.markdown("## üìä B√°o C√°o Chi Ti·∫øt")
            
            # So sanh
            col_a, col_b, col_c = st.columns(3)
            
            with col_a:
                st.metric("ƒêi·ªÉm c·ªßa b·∫°n", f"{score}/5.0")
            
            with col_b:
                delta_avg = round(score - benchmark['avg'], 1)
                st.metric(
                    "So v·ªõi TB ng√†nh", 
                    f"{benchmark['avg']}/5.0",
                    delta=f"{delta_avg:+.1f}"
                )
            
            with col_c:
                if score >= benchmark['top']:
                    percentile = "Top 25%"
                elif score >= benchmark['avg']:
                    percentile = f"Top {int(50 - ((score - benchmark['avg']) / (benchmark['top'] - benchmark['avg']) * 25))}%"
                else:
                    percentile = f"Bottom {int(50 - (score / benchmark['avg'] * 50))}%"
                st.metric("V·ªã tr√≠ trong ng√†nh", percentile)
            
            st.markdown("---")
            
            # Noi dung phan tich
            st.markdown(analysis)
            
            st.markdown("---")
            
            # Luu file
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"assessment_{company_name.replace(' ', '_')}_{timestamp}.txt"
            
            report_content = f"""B√ÅO C√ÅO ƒê√ÅNH GI√Å CHUY·ªÇN ƒê·ªîI S·ªê
{'='*70}

C√¥ng ty: {company_name}
Ng√†nh: {industry}
ƒêi·ªÉm: {score}/5.0
Trung b√¨nh ng√†nh: {benchmark['avg']}/5.0
Top 25% ng√†nh: {benchmark['top']}/5.0
Ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M')}

{'-'*70}

{analysis}

{'-'*70}

B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi AI-Powered Assessment Tool
Website: yourcompany.com
Email: consulting@yourcompany.com
"""
            
            # Download button
            st.download_button(
                label="üì• T·∫£i B√°o C√°o (TXT)",
                data=report_content,
                file_name=filename,
                mime="text/plain"
            )
            
            # Call to action
            st.success("‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
            
            st.info("""
            ### üéÅ Nh·∫≠n t∆∞ v·∫•n mi·ªÖn ph√≠ 30 ph√∫t
            
            ƒê·∫∑t l·ªãch ƒë·ªÉ:
            - Th·∫£o lu·∫≠n chi ti·∫øt v·ªÅ b√°o c√°o
            - Nh·∫≠n th√™m insights v·ªÅ vendor & gi√° th·ª±c t·∫ø VN
            - ƒêi·ªÅu ch·ªânh roadmap ph√π h·ª£p v·ªõi budget
            
            üìß Email: consulting@yourcompany.com  
            üìû Hotline: 0123 456 789
            """)
            
        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")
            st.info("""
            **Ki·ªÉm tra:**
            1. API key ƒë√£ ƒë∆∞·ª£c setup ch∆∞a?
            2. C√≥ k·∫øt n·ªëi internet kh√¥ng?
            3. T√†i kho·∫£n Anthropic c√≤n credit kh√¥ng?
            """)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 2rem;">
    <p>¬© 2025 Your Consulting Company | 
    <a href="mailto:consulting@yourcompany.com">consulting@yourcompany.com</a> | 
    0123 456 789</p>
    <p style="font-size: 12px;">B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi AI-Powered Assessment Tool</p>
</div>

""", unsafe_allow_html=True)


